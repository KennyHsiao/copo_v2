// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	admin_user "com.copo/bo_service/boadmin/internal/handler/admin_user"
	allocorder "com.copo/bo_service/boadmin/internal/handler/allocorder"
	announcement "com.copo/bo_service/boadmin/internal/handler/announcement"
	announcementCallBack "com.copo/bo_service/boadmin/internal/handler/announcementCallBack"
	announcementGroup "com.copo/bo_service/boadmin/internal/handler/announcementGroup"
	announcementTemp "com.copo/bo_service/boadmin/internal/handler/announcementTemp"
	backup "com.copo/bo_service/boadmin/internal/handler/backup"
	bankblockaccount "com.copo/bo_service/boadmin/internal/handler/bankblockaccount"
	banks "com.copo/bo_service/boadmin/internal/handler/banks"
	channelBalanceRecord "com.copo/bo_service/boadmin/internal/handler/channelBalanceRecord"
	channelbalance "com.copo/bo_service/boadmin/internal/handler/channelbalance"
	channelbank "com.copo/bo_service/boadmin/internal/handler/channelbank"
	channeldata "com.copo/bo_service/boadmin/internal/handler/channeldata"
	channelpaytype "com.copo/bo_service/boadmin/internal/handler/channelpaytype"
	channelraterecord "com.copo/bo_service/boadmin/internal/handler/channelraterecord"
	commissionMonthReport "com.copo/bo_service/boadmin/internal/handler/commissionMonthReport"
	commissionWithdrawOrder "com.copo/bo_service/boadmin/internal/handler/commissionWithdrawOrder"
	currency "com.copo/bo_service/boadmin/internal/handler/currency"
	download "com.copo/bo_service/boadmin/internal/handler/download"
	etl "com.copo/bo_service/boadmin/internal/handler/etl"
	language "com.copo/bo_service/boadmin/internal/handler/language"
	login "com.copo/bo_service/boadmin/internal/handler/login"
	menu "com.copo/bo_service/boadmin/internal/handler/menu"
	merchant "com.copo/bo_service/boadmin/internal/handler/merchant"
	merchantPtBalance "com.copo/bo_service/boadmin/internal/handler/merchantPtBalance"
	merchantPtBalanceRecord "com.copo/bo_service/boadmin/internal/handler/merchantPtBalanceRecord"
	merchant_user "com.copo/bo_service/boadmin/internal/handler/merchant_user"
	merchantbalance "com.copo/bo_service/boadmin/internal/handler/merchantbalance"
	merchantbalancerecord "com.copo/bo_service/boadmin/internal/handler/merchantbalancerecord"
	merchantbindbank "com.copo/bo_service/boadmin/internal/handler/merchantbindbank"
	merchantchannelrate "com.copo/bo_service/boadmin/internal/handler/merchantchannelrate"
	merchantcurrency "com.copo/bo_service/boadmin/internal/handler/merchantcurrency"
	merchantfrozenrecord "com.copo/bo_service/boadmin/internal/handler/merchantfrozenrecord"
	merchantraterecord "com.copo/bo_service/boadmin/internal/handler/merchantraterecord"
	order "com.copo/bo_service/boadmin/internal/handler/order"
	orderaction "com.copo/bo_service/boadmin/internal/handler/orderaction"
	orderfeeprofit "com.copo/bo_service/boadmin/internal/handler/orderfeeprofit"
	orderlog "com.copo/bo_service/boadmin/internal/handler/orderlog"
	orderrecord "com.copo/bo_service/boadmin/internal/handler/orderrecord"
	payorder "com.copo/bo_service/boadmin/internal/handler/payorder"
	paytype "com.copo/bo_service/boadmin/internal/handler/paytype"
	permit "com.copo/bo_service/boadmin/internal/handler/permit"
	proxypayorder "com.copo/bo_service/boadmin/internal/handler/proxypayorder"
	report "com.copo/bo_service/boadmin/internal/handler/report"
	role "com.copo/bo_service/boadmin/internal/handler/role"
	systemparam "com.copo/bo_service/boadmin/internal/handler/systemparam"
	systemrate "com.copo/bo_service/boadmin/internal/handler/systemrate"
	test "com.copo/bo_service/boadmin/internal/handler/test"
	timezonex "com.copo/bo_service/boadmin/internal/handler/timezonex"
	userlog "com.copo/bo_service/boadmin/internal/handler/userlog"
	userlogTemplate "com.copo/bo_service/boadmin/internal/handler/userlogTemplate"
	walletaddress "com.copo/bo_service/boadmin/internal/handler/walletaddress"
	withdraworder "com.copo/bo_service/boadmin/internal/handler/withdraworder"
	"com.copo/bo_service/boadmin/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/menu/create",
				Handler: menu.MenuCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/menu/update",
				Handler: menu.MenuUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/menu/delete",
				Handler: menu.MenuDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/menu/query",
				Handler: menu.MenuQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/menu/query_all",
				Handler: menu.MenuQueryAllHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/auth"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/permit/create",
				Handler: permit.PermitCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/permit/update",
				Handler: permit.PermitUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/permit/delete",
				Handler: permit.PermitDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/permit/query",
				Handler: permit.PermitQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/permit/query_all",
				Handler: permit.PermitQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/permit/batch_upsert",
				Handler: permit.PermitUpsertHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/auth"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/role/create",
				Handler: role.RoleCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/role/update",
				Handler: role.RoleUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/role/delete",
				Handler: role.RoleDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/role/query",
				Handler: role.RoleQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/role/query_all",
				Handler: role.RoleQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/role/get_drop_down_list",
				Handler: role.GetRoleDropDownListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/auth"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/create",
				Handler: admin_user.UserCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/update",
				Handler: admin_user.UserUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/delete",
				Handler: admin_user.UserDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/query",
				Handler: admin_user.UserQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/query_all",
				Handler: admin_user.UserQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/menu",
				Handler: admin_user.UserMenuHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/refresh_token",
				Handler: admin_user.UserRefreshTokenHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/unfreeze",
				Handler: admin_user.UserUnfreezeHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/auth"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/otp/bind",
				Handler: admin_user.OtpBindHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/reset",
				Handler: admin_user.UserResetHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/auth"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/query_user_currencies",
				Handler: admin_user.UserCurrenciesQueryHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/auth"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: login.LoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/auth"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/otp/valid",
				Handler: login.OtpValidHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/auth"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/otp/check",
				Handler: login.OtpCheckHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/auth"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/merchantuser/create",
				Handler: merchant_user.MerchantUserCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantuser/update",
				Handler: merchant_user.MerchantUserUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantuser/query_all",
				Handler: merchant_user.MerchantUserQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantuser/reset_password",
				Handler: merchant_user.MerchantUserResetPasswordHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/auth"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/merchantuser/update_password",
				Handler: merchant_user.MerchantUserUpdatePasswordHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/auth"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/userlog/query_all",
				Handler: userlog.UserLogQueryHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/auth"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/userlogTemplate/create",
				Handler: userlogTemplate.UserLogTemplateCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/userlogTemplate/update",
				Handler: userlogTemplate.UserLogTemplateUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/userlogTemplate/delete",
				Handler: userlogTemplate.UserLogTemplateDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/userlogTemplate/query",
				Handler: userlogTemplate.UserLogTemplateQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/userlogTemplate/query_all",
				Handler: userlogTemplate.UserLogTemplateQueryAllHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/auth"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/timezonex/create",
				Handler: timezonex.TimezonexCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/timezonex/update",
				Handler: timezonex.TimezonexUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/timezonex/delete",
				Handler: timezonex.TimezonexDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/timezonex/query",
				Handler: timezonex.TimezonexQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/timezonex/query_all",
				Handler: timezonex.TimezonexQueryAllHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/basic"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/currency/create",
				Handler: currency.CurrencyCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/currency/update",
				Handler: currency.CurrencyUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/currency/delete",
				Handler: currency.CurrencyDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/currency/query",
				Handler: currency.CurrencyQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/currency/query_all",
				Handler: currency.CurrencyQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/currency/batch_sort",
				Handler: currency.CurrencyBatchSortHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/basic"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/language/create",
				Handler: language.LanguageCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/language/update",
				Handler: language.LanguageUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/language/delete",
				Handler: language.LanguageDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/language/query",
				Handler: language.LanguageQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/language/query_all",
				Handler: language.LanguageQueryAllHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/basic"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/systemrate/create",
				Handler: systemrate.SystemRateCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/systemrate/update",
				Handler: systemrate.SystemRateUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/systemrate/query_all",
				Handler: systemrate.SystemRateQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/systemip/query_all",
				Handler: systemrate.SystemIpQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/systemip/update",
				Handler: systemrate.SystemIpUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/systemchannelbalance/query",
				Handler: systemrate.SystemChannelBalanceLimitQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/systemchannelbalance/update",
				Handler: systemrate.SystemChannelBalanceLimitUpdateHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/basic"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/systemParam/query_all",
				Handler: systemparam.SystemParamQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/systemParam/update",
				Handler: systemparam.SystemParamUpdateHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/basic"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/blockaccount/create",
				Handler: bankblockaccount.BankBlockAccountCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/blockaccount/update",
				Handler: bankblockaccount.BankBlockAccountUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/blockaccount/delete",
				Handler: bankblockaccount.BankBlockAccountDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/blockaccount/query",
				Handler: bankblockaccount.BankBlockAccountQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/blockaccount/query_all",
				Handler: bankblockaccount.BankBlockAccountQueryAllHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/bank"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/banks/create",
				Handler: banks.BankCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/banks/update",
				Handler: banks.BankUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/banks/delete",
				Handler: banks.BankDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/banks/query",
				Handler: banks.BankQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/banks/queryall",
				Handler: banks.BankQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/banks/query_for_bk",
				Handler: banks.BankQueryForBKHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/bank"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/merchant/create",
				Handler: merchant.MerchantCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchant/update",
				Handler: merchant.MerchantUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchant/delete",
				Handler: merchant.MerchantDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchant/query",
				Handler: merchant.MerchantQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchant/query_all",
				Handler: merchant.MerchantQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchant/query_list_view",
				Handler: merchant.MerchantQueryListViewHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchant/query_list_view_total",
				Handler: merchant.MerchantQueryListViewTotalHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchant/export_list_view_excel",
				Handler: merchant.MerchantExportListViewExcelHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchant/query_user_balance",
				Handler: merchant.MerchantQueryUserBalanceHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchant/query_user_pt_balance",
				Handler: merchant.MerchantQueryUserPtBalanceHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchant/query_distinct_code",
				Handler: merchant.MerchantQueryDistinctCodeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchant/update_status",
				Handler: merchant.MerchantUpdateStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchant/update_agent_status",
				Handler: merchant.MerchantUpdateAgentStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchant/update_bill_lading_type",
				Handler: merchant.MerchantUpdateBillLadingTypeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchant/update_rate_check",
				Handler: merchant.MerchantUpdateRateCheckHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchant/reset_password",
				Handler: merchant.MerchantResetPasswordHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchant/reset_screct_key",
				Handler: merchant.MerchantResetScrectKeyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchant/get_screct_key",
				Handler: merchant.MerchantGetScrectKeyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchant/transfer_parent_agent",
				Handler: merchant.MerchantTransferParentAgentHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchant/reset_withdraw_password",
				Handler: merchant.MerchantResetWithdrawPasswordHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchant/update_withdraw_password",
				Handler: merchant.MerchantUpdateWithdrawPasswordHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchant/update_params",
				Handler: merchant.MerchantUpdateParamsRequestHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchant/GetSubAgents",
				Handler: merchant.MerchantGetSubAgentsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchant/GetDescendantAgents",
				Handler: merchant.MerchantGetDescendantAgentsHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/merchant"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/merchantbalance/create",
				Handler: merchantbalance.MerchantBalanceCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantbalance/update_balance",
				Handler: merchantbalance.MerchantBalanceUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantbalance/update_frozen",
				Handler: merchantbalance.MerchantFrozenUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantbalance/delete",
				Handler: merchantbalance.MerchantBalanceDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantbalance/query",
				Handler: merchantbalance.MerchantBalanceQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantbalance/query_all",
				Handler: merchantbalance.MerchantBalanceQueryAllHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/merchant"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/merchantPtBalance/rename",
				Handler: merchantPtBalance.MerchantPtBalanceRenameHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantPtBalance/create",
				Handler: merchantPtBalance.MerchantPtBalanceCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantPtBalance/update_balance",
				Handler: merchantPtBalance.MerchantPtBalanceUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantPtBalance/query_all",
				Handler: merchantPtBalance.MerchantPtBalanceQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantPtBalance/enable",
				Handler: merchantPtBalance.MerchantPtBalanceEnableHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantPtBalance/disable",
				Handler: merchantPtBalance.MerchantPtBalanceDisableHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/merchant"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/merchantPtBalanceRecord/query_all",
				Handler: merchantPtBalanceRecord.MerchantPtBalanceRecordQueryAllHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/merchant"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/merchantchannelrate/configure",
				Handler: merchantchannelrate.MerchantChannelRateConfigureHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantchannelrate/query_list_view",
				Handler: merchantchannelrate.MerchantQueryRateListViewHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantchannelrate/get_code_drop_down_list",
				Handler: merchantchannelrate.MerchantGetCodeDropDownListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantchannelrate/get_parent_code_drop_down_list",
				Handler: merchantchannelrate.MerchantGetParentCodeDropDownListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantchannelrate/configure_list",
				Handler: merchantchannelrate.MerchantConfigureRateListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantchannelrate/pay_type_List",
				Handler: merchantchannelrate.MerchantRatePayTypeListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantchannelrate/reset",
				Handler: merchantchannelrate.MerchantRateResetHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/merchant"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/merchantraterecord/query_all",
				Handler: merchantraterecord.MerchantRateRecordQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantraterecord/create",
				Handler: merchantraterecord.MerchantRateRecordCreateHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/merchant"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/merchantcurrency/query",
				Handler: merchantcurrency.MerchantCurrencyQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantcurrency/query_all",
				Handler: merchantcurrency.MerchantCurrencyQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantcurrency/get_available_currency",
				Handler: merchantcurrency.MerchantGetAvailableCurrencyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantcurrency/update_currencies",
				Handler: merchantcurrency.MerchantUpdateCurrenciesHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/merchant"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/merchantbindbank/create",
				Handler: merchantbindbank.MerchantBindBankCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantbindbank/update",
				Handler: merchantbindbank.MerchantBindBankUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantbindbank/delete",
				Handler: merchantbindbank.MerchantBindBankDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantbindbank/query",
				Handler: merchantbindbank.MerchantBindBankQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantbindbank/query_all",
				Handler: merchantbindbank.MerchantBindBankQueryAllHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/merchant"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/merchantbalancerecord/query_all",
				Handler: merchantbalancerecord.MerchantBalanceRecordQueryAllHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/merchant"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/merchantfrozenrecord/query_all",
				Handler: merchantfrozenrecord.MerchantFrozenRecordQueryAllHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/merchant"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/merchantnotify/send",
				Handler: merchant.SendNotifyChannelsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantnotify/query",
				Handler: merchant.MerchantChannelNotifyQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantnotify/update",
				Handler: merchant.MerchantChannelNotifyUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantnotify/resend",
				Handler: merchant.MerchantChannelNotifyResendHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/merchant"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/order/interCharge_create",
				Handler: order.InternalChargeOrderCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/interCharge_create_cs",
				Handler: order.InternalChargeOrderCreateCsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/proxypay_create",
				Handler: order.ProxyPayOrderCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/change_to_test",
				Handler: order.ProxyOrderToTestHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/proxy_change_to_success",
				Handler: order.ProxyOrderToSuccessHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/pay_change_to_test",
				Handler: order.PayOrderToTestHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/withdraw_create",
				Handler: order.WithdrawOrderCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/update",
				Handler: order.OrderUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/withdraw_review",
				Handler: order.WithdrawReviewHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/image_upload",
				Handler: order.OrderImageUploadHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/batchcheck",
				Handler: order.BatchCheckHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/internalCharge_query_all",
				Handler: order.InternalChargeOrderQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/withdraw_query_all",
				Handler: order.WithdrawOrderQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/waitauditNumber_query",
				Handler: order.OrderQueryWaitAuditNumberHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/query_chn_fee",
				Handler: order.OrderQueryMerchantChannelFeeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/query_withdraw_chn",
				Handler: order.WithdrawOrderChannelHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/query_withdraw_fee",
				Handler: order.WithdrawOrderFeeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/update_withdraw_process",
				Handler: order.WithdrawOrderUpdateReviewProcessHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/withdraw_verify_way",
				Handler: order.WithdrawVerifyWayHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/withdraw_verify_passwd",
				Handler: order.WithdrawVerifyPasswordHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/withdraw_change_to_test",
				Handler: order.WithdrawOrderToTestHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/sub-withdraw-to-channel",
				Handler: order.SubWithdrawToChannelHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/query-sub-withdraw",
				Handler: order.QuerySubWithdrawHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/sub-withdraw-call-back",
				Handler: order.SubWithdrawCallBackHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/sub_withdraw_review",
				Handler: order.SubWithdrawReviewHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/transaction"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/allocorder/create",
				Handler: allocorder.AllocRecordCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/allocorder/record_query_all",
				Handler: allocorder.AllocRecordQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/allocorder/record_excel",
				Handler: allocorder.AllocRecordExcelHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/allocorder/record_total_info",
				Handler: allocorder.AllocRecordTotalInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/allocorder/confirm_order",
				Handler: allocorder.ConfirmAllocOrderHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/transaction"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/orderaction/query_all",
				Handler: orderaction.OrderActionQueryAllHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/transaction"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/orderrecord/receipt_record_query_all",
				Handler: orderrecord.ReceiptRecordQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/orderrecord/receipt_record_total_info",
				Handler: orderrecord.ReceiptRecordTotalInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/orderrecord/receipt_record_excel",
				Handler: orderrecord.ReceiptRecordExcelHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/orderrecord/receipt_record_merchant_excel",
				Handler: orderrecord.ReceiptRecordMerchantExcelHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/orderrecord/pt_balance_records_query",
				Handler: orderrecord.PtBalanceRecordsQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/orderrecord/income_expense_query",
				Handler: orderrecord.IncomeExpenseQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/orderrecord/income_expense_excel",
				Handler: orderrecord.IncomeExpenseExcelHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/orderrecord/income_expense_merchant_excel",
				Handler: orderrecord.IncomeExpenseMerchantExcelHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/orderrecord/confirm_pay_order",
				Handler: orderrecord.ConfirmPayOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/orderrecord/confirm_proxy_pay_order",
				Handler: orderrecord.ConfirmProxyPayOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/orderrecord/callback_pay_order",
				Handler: orderrecord.CallBacPayOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/orderrecord/frozen_receipt_order",
				Handler: orderrecord.FrozenReceiptOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/orderrecord/make_up_receipt_order",
				Handler: orderrecord.MakeUpReceiptOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/orderrecord/recover_receipt_order",
				Handler: orderrecord.RecoverReceiptOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/orderrecord/deduct_record_query_all",
				Handler: orderrecord.DeductRecordQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/orderrecord/deduct_record_total_info",
				Handler: orderrecord.DeductRecordTotalInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/orderrecord/deduct_record_excel",
				Handler: orderrecord.DeductRecordExcelHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/orderrecord/deduct_record_merchant_excel",
				Handler: orderrecord.DeductRecordMerchantExcelHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/orderrecord/reversal_record",
				Handler: orderrecord.ReversalRecordHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/orderrecord/personal_repayment_query_all",
				Handler: orderrecord.PersonalRepaymentHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/orderrecord/order_channel_query",
				Handler: orderrecord.OrderChannelRecordHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/orderrecord/frozen_record_query_all",
				Handler: orderrecord.FrozenRecordQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/orderrecord/unfrozen_order",
				Handler: orderrecord.UnfrozenOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/orderrecord/personal_status_update",
				Handler: orderrecord.PersonalStatusUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/proxy-call-back-merchant",
				Handler: orderrecord.ProxyPayCallBackMerchantHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/withdraw-call-back-merchant",
				Handler: orderrecord.WithdrawCallBackMerchantHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/withdraw-call-back-proxy",
				Handler: orderrecord.WithdrawProxyPayApiQueryHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/transaction"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/orderlog/query_all",
				Handler: orderlog.TransactionLogQueryAllHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/transaction"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/orderfeeprofit/query_all",
				Handler: orderfeeprofit.OrderFeeProfitQueryAllHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/transaction"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/withdraw-order",
				Handler: withdraworder.WithdrawApiOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/withdraw-query",
				Handler: withdraworder.WithdrawApiQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/withdraw-test-callback",
				Handler: withdraworder.WithdrawApiTestCallBackHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/dior/merchant-api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/pay-order",
				Handler: payorder.PayOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/pay-query",
				Handler: payorder.PayQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/pay-query-balance",
				Handler: payorder.PayQueryBalanceHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/pay-call-back",
				Handler: payorder.PayCallBackHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/dior/merchant-api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/proxy-order",
				Handler: proxypayorder.ProxyPayOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/proxy-query",
				Handler: proxypayorder.ProxyPayQueryHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/dior/merchant-api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/channeldata/create",
				Handler: channeldata.ChannelDataCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/channeldata/update",
				Handler: channeldata.ChannelDataUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/channeldata/delete",
				Handler: channeldata.ChannelDataDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/channeldata/query",
				Handler: channeldata.ChannelDataQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/channeldata/queryall",
				Handler: channeldata.ChannelDataQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/channeldata/get_drop_down_list",
				Handler: channeldata.ChannelDataGetDropDownListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/channeldata/query_for_bk",
				Handler: channeldata.ChannelDataQueryForBKProxyHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/channel"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/channelpaytype/create",
				Handler: channelpaytype.ChannelPayTypeCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/channelpaytype/update",
				Handler: channelpaytype.ChannelPayTypeUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/channelpaytype/delete",
				Handler: channelpaytype.ChannelPayTypeDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/channelpaytype/query",
				Handler: channelpaytype.ChannelPayTypeQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/channelpaytype/query_all",
				Handler: channelpaytype.ChannelPayTypeQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/channelpaytype/merchantrate_query",
				Handler: channelpaytype.ChannelPayTypeMerchantRateQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/channelpaytype/merchantrate_update",
				Handler: channelpaytype.ChannelPayTypeMerRateUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/channelpaytype/query_amount",
				Handler: channelpaytype.ChannelPayTypeQueryAmountHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/channel"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/channelraterecord/query_all",
				Handler: channelraterecord.ChannelRateRecordQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantraterecord/create",
				Handler: channelraterecord.ChannelRateRecordCreateHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/channel"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/paytype/create",
				Handler: paytype.PayTypeCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/paytype/update",
				Handler: paytype.PayTypeUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/paytype/delete",
				Handler: paytype.PayTypeDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/paytype/query",
				Handler: paytype.PayTypeQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/paytype/query_all",
				Handler: paytype.PayTypeQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/paytype/batch_sort",
				Handler: paytype.PayTypeBatchSortHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/channel"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/channelbank/create",
				Handler: channelbank.ChannelBankCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/channelbank/update",
				Handler: channelbank.ChannelBankUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/channelbank/delete",
				Handler: channelbank.ChannelBankDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/channelbank/query",
				Handler: channelbank.ChannelBankQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/channelbank/query_all",
				Handler: channelbank.ChannelBankQueryAllHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/channel"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/channelbalance/update",
				Handler: channelbalance.ChannelBalanceUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/channelbalance/query_all",
				Handler: channelbalance.ChannelBalanceQueryHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/channel"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/channelbalance/update",
				Handler: channelbalance.ChannelBalanceScheduleUpdateHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/channel_schedule"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/channelBalanceRecord/schedule_create",
				Handler: channelBalanceRecord.ChannelBalanceRecordScheduleCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/channelBalanceRecord/query_all",
				Handler: channelBalanceRecord.ChannelBalanceRecordScheduleQueryAllHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/channel"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/walletaddress/create",
				Handler: walletaddress.WalletAddressCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/walletaddress/update",
				Handler: walletaddress.WalletAddressUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/walletaddress/update_status",
				Handler: walletaddress.WalletAddressUpdateStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/walletaddress/delete",
				Handler: walletaddress.WalletAddressDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/walletaddress/query",
				Handler: walletaddress.WalletAddressQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/walletaddress/query_all",
				Handler: walletaddress.WalletAddressQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/walletaddress/generate_key_pair",
				Handler: walletaddress.GenerateKeyPairHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/channel"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/channelreport/query",
				Handler: report.ChannelReportQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/channelreport/total",
				Handler: report.ChannelReportTotalHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/channelreport/excel",
				Handler: report.ChannelReportQueryExcelHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/report"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/merchantreport/query",
				Handler: report.MerchantReportQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchantreport/excel",
				Handler: report.MerchantReportQueryExcelHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/report"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/statementofaccount/pay_check_bill_query",
				Handler: report.PayCheckBillQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/statementofaccount/pay_check_bill_excel",
				Handler: report.PayCheckBillExcelHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/statementofaccount/withdraw_check_bill_query",
				Handler: report.WithdrawCheckBillQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/statementofaccount/withdraw_check_bill_excel",
				Handler: report.WithdrawCheckBillExcelHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/statementofaccount/intercharge_check_bill_query",
				Handler: report.InternalChargeCheckBillQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/statementofaccount/intercharge_check_bill_excel",
				Handler: report.InternalChargeCheckBillExcelHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/statementofaccount/proxy_pay_check_bill_query",
				Handler: report.ProxyPayCheckBillQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/statementofaccount/proxy_pay_check_bill_excel",
				Handler: report.ProxyPayCheckBillExcelHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/monthProfit/query",
				Handler: report.IncomReportQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/monthProfit/excel",
				Handler: report.IncomReportExcelHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/monthProfit/recalculate",
				Handler: report.ReCalculateIncomMonthReportHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/statementofaccount/withdraw_detail_query",
				Handler: report.WithdrawDetailQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/statementofaccount/appropiation_check_bill_query",
				Handler: report.AppropriationCheckBillQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/statementofaccount/appropiation_check_bill_excel",
				Handler: report.AppropriationCheckBillExcelHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/report"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/dashboard/review_process",
				Handler: report.ReviewProcessHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/dashboard/total_display",
				Handler: report.TotalDisplayHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/dashboard/income_detail",
				Handler: report.IncomeDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/dashboard/total_payout_handlingFee",
				Handler: report.TotalPayoutHandlingFeeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/dashboard/weekly_total_income",
				Handler: report.WeeklyTotalIncomeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/dashboard/weekly_trans_detail",
				Handler: report.WeeklyTransDetailHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/report"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/monthReport/query_all",
				Handler: commissionMonthReport.MonthReportQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/monthReport/excel",
				Handler: commissionMonthReport.MonthReportExcelHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/monthReport/create_for_month",
				Handler: commissionMonthReport.MonthReportCreateForMonthHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/monthReport/recalculate",
				Handler: commissionMonthReport.MonthReportRecalculateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/monthReport/change",
				Handler: commissionMonthReport.MonthReportChangeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/monthReport/confirm",
				Handler: commissionMonthReport.MonthReportConfirmHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/commission"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/withdraw_order/query_all",
				Handler: commissionWithdrawOrder.CommissionWithdrawOrderQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/withdraw_order/create",
				Handler: commissionWithdrawOrder.CommissionWithdrawOrderCreateHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/commission"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/merchantAndAdmin",
				Handler: etl.MerchantAndAdminEtlHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchant",
				Handler: etl.MerchantEtlHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/channel",
				Handler: etl.ChannelEtlHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/commissionExcelImport",
				Handler: etl.CommissionExcelImportHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/etl"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/temp/query_all",
				Handler: announcementTemp.AnnouncementTempQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/tempParam/query_all",
				Handler: announcementTemp.AnnouncementTempParamQueryAllAllHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/announcement"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/announcement/query",
				Handler: announcement.AnnouncementQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/announcement/query_all",
				Handler: announcement.AnnouncementQueryAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/announcement/create",
				Handler: announcement.AnnouncementCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/announcement/update",
				Handler: announcement.AnnouncementUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/announcement/update_draft",
				Handler: announcement.AnnouncementUpdateDraftHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/announcement/delete",
				Handler: announcement.AnnouncementDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/announcement/copy",
				Handler: announcement.AnnouncementCopyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/announcement/resend",
				Handler: announcement.AnnouncementResendHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/announcement/unsend",
				Handler: announcement.AnnouncementUnsendHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/announcementMerchant/ignore",
				Handler: announcement.AnnouncementMerchantIgnoreHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/announcementMerchant/resend",
				Handler: announcement.AnnouncementMerchantResendHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/announcement"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/channelRule/query_all",
				Handler: announcementTemp.ChannelRuleQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/channelRule/create",
				Handler: announcementTemp.ChannelRuleCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/channelRule/update",
				Handler: announcementTemp.ChannelRuleUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/channelRule/delete",
				Handler: announcementTemp.ChannelRuleDeleteHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/announcement"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/group/query_all",
				Handler: announcementGroup.GroupQueryHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/announcement"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/announcement/skype_call_back",
				Handler: announcementCallBack.AnnouncementSkypeCallBackHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/announcement"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/create",
				Handler: backup.OrderBackUpHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/backup"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/healthCheck",
				Handler: test.HealthCheckHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/test",
				Handler: test.TestHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/test"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/query_all",
				Handler: download.DownloadCenterQueryAllHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/down"),
	)
}
